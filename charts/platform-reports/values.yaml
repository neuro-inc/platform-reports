nodePoolLabels:
  job: platform.neuromation.io/job
  gpu: platform.neuromation.io/accelerator
  nodePool: platform.neuromation.io/nodepool
  preemptible: platform.neuromation.io/preemptible

objectStore:
  supported: true
  configMapName: thanos-object-storage-config

platform:
  accessTokenCookieNames: sat,dat
  token: {}

platformJobs:
  namespace: platform-jobs
  label: platform.neuromation.io/job

image:
  repository: "$IMAGE_REPO"
  tag: "$IMAGE_TAG"

imagePullSecrets: []

secrets: []

nvidiaDCGMExporter:
  nameOverride: nvidia-dcgm-exporter
  fullnameOverride: nvidia-dcgm-exporter

  image:
    repository: nvidia/dcgm-exporter
    tag: 1.7.2

metricsExporter:
  port: 9500
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
  podMetadata:
    annotations: {}

prometheusProxy:
  prometheus:
    host: thanos-query-http
    port: 10902
  replicas: 2
  resources:
    requests:
      cpu: 100m
      memory: 256Mi

grafanaProxy:
  replicas: 2
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
  ingress: {}

kube-prometheus-stack:
  nameOverride: prometheus
  fullnameOverride: prometheus

  defaultRules:
    create: false

  additionalPrometheusRules:
    - name: prometheus-rules
      groups:
        - name: platform_rules
          rules:
            - record: kube_pod_running
              expr: kube_pod_status_phase{phase="Running"} == 1
            - record: kube_pod_running_scheduled_time
              expr: kube_pod_running * on(job,pod) kube_pod_status_scheduled_time
            - record: kube_pod_running_scheduled_duration
              expr: timestamp(kube_pod_running) - on(job,pod) kube_pod_running_scheduled_time >= 0
            - record: kube_pod_credits_per_hour_labeled
              expr: (kube_pod_credits_per_hour * on(pod) group_left(label_platform_neuromation_io_user) kube_pod_labels) * on(pod) group_left(label_platform_neuromation_io_nodepool) (kube_pod_info * on(node) group_left(label_platform_neuromation_io_nodepool) kube_node_labels)
            - record: DCGM_FI_DEV_COUNT_POD
              expr: max by(job,pod) (DCGM_FI_DEV_COUNT)

  alertmanager:
    enabled: false

  kubeApiServer:
    enabled: false

  kubeControllerManager:
    enabled: false

  coreDns:
    enabled: false

  kubeDns:
    enabled: false

  kubeEtcd:
    enabled: false

  kubeScheduler:
    enabled: false

  kubeProxy:
    enabled: false

  kubeStateMetrics:
    enabled: true

    serviceMonitor:
      interval: 15s

      metricRelabelings:
        - sourceLabels:
            - label_beta_kubernetes_io_instance_type
          targetLabel: label_node_kubernetes_io_instance_type

  kube-state-metrics:
    nameOverride: kube-state-metrics
    fullnameOverride: kube-state-metrics

    image:
      repository: quay.io/coreos/kube-state-metrics
      tag: v1.9.7

    customLabels:
      service: kube-state-metrics

    resources:
      requests:
        cpu: 100m
        memory: 200Mi

    collectors:
      # enabled
      nodes: true
      pods: true

      # disabled
      certificatesigningrequests: false
      configmaps: false
      cronjobs: false
      daemonsets: false
      deployments: false
      endpoints: false
      horizontalpodautoscalers: false
      ingresses: false
      jobs: false
      limitranges: false
      mutatingwebhookconfigurations: false
      namespaces: false
      networkpolicies: false
      persistentvolumeclaims: false
      persistentvolumes: false
      poddisruptionbudgets: false
      replicasets: false
      replicationcontrollers: false
      resourcequotas: false
      secrets: false
      services: false
      statefulsets: false
      storageclasses: false
      validatingwebhookconfigurations: false
      verticalpodautoscalers: false
      volumeattachments: false

  kubelet:
    enabled: true

    serviceMonitor:
      interval: 15s
      https: true
      probes: false
      resource: false
      cAdvisor: true

  nodeExporter:
    enabled: true

    resources:
      requests:
        cpu: 15m
        memory: 50Mi

    serviceMonitor:
      interval: 15s

  prometheus-node-exporter:
    nameOverride: prometheus-node-exporter
    fullnameOverride: prometheus-node-exporter

    image:
      repository: quay.io/prometheus/node-exporter
      tag: v1.0.1

    podLabels:
      service: prometheus-node-exporter

    securityContext:
      runAsUser: 0
      runAsNonRoot: false

    extraHostVolumeMounts:
      - name: system-dbus-socket
        hostPath: /var/run/dbus/system_bus_socket
        mountPath: /var/run/dbus/system_bus_socket
        readOnly: true
      - name: systemd-private
        hostPath: /run/systemd/private
        mountPath: /run/systemd/private
        readOnly: true

    extraArgs:
      - --collector.systemd
      - --collector.processes
      - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)
      - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$

    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 100%

  prometheusOperator:
    image:
      repository: quay.io/coreos/prometheus-operator
      tag: v0.38.2

    podLabels:
      service: prometheus-operator

    prometheusConfigReloaderImage:
      repository: quay.io/coreos/prometheus-config-reloader
      tag: v0.38.2

    configmapReloadImage:
      repository: docker.io/jimmidyson/configmap-reload
      tag: v0.4.0

    kubectlImage:
      repository: docker.io/bitnami/kubectl
      tag: 1.16.15

    tlsProxy:
      image:
        repository: squareup/ghostunnel
        tag: v1.5.2

    admissionWebhooks:
      patch:
        image:
          repository: jettech/kube-webhook-certgen
          tag: v1.2.1

    createCustomResource: false
    cleanupCustomResource: false

    kubeletService:
      enabled: true

    serviceMonitor:
      selfMonitor: false

  prometheus:
    serviceMonitor:
      selfMonitor: false
    prometheusSpec:
      image:
        repository: quay.io/prometheus/prometheus
        tag: v2.21.0

      podMetadata:
        labels:
          service: prometheus
      replicas: 1
      retention: 12h
      scrapeInterval: 15s
      evaluationInterval: 15s
      resources:
        requests:
          cpu: "500m"
          memory: "1Gi"
      storageSpec:
        volumeClaimTemplate:
          metadata:
            name: prometheus
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
      # thanos sidecar
      thanos:
        image: quay.io/thanos/thanos:v0.14.0
        version: v0.14.0

  grafana:
    enabled: false

thanos:
  nameOverride: thanos
  fullnameOverride: thanos

  image:
    repository: quay.io/thanos/thanos
    tag: v0.14.0

  store:
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    dataVolume:
      backend:
        persistentVolumeClaim:
          claimName: thanos-store
    persistentVolumeClaim:
      name: thanos-store
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
    labels:
      service: thanos-store

  # Compact service works with data in object storage
  compact:
    retentionResolutionRaw: 0d
    retentionResolution5m: 0d
    retentionResolution1h: 0d
    extraArgs:
      - --wait-interval=24h
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    dataVolume:
      backend:
        persistentVolumeClaim:
          claimName: thanos-compact
    persistentVolumeClaim:
      name: thanos-compact
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
    labels:
      service: thanos-compact

  query:
    labels:
      service: thanos-query

  bucket:
    labels:
      service: thanos-bucket

  rule:
    enabled: false

  sidecar:
    # NOTE: This is only the service references for the sidecar
    enabled: true
    selector:
      app: prometheus

grafana:
  nameOverride: grafana
  fullnameOverride: grafana

  image:
    repository: grafana/grafana
    tag: 7.2.1

  podLabels:
    service: grafana

  adminUser: admin

  ingress:
    enabled: false

  initChownData:
    image:
      repository: busybox
      tag: latest

  sidecar:
    image:
      repository: kiwigrid/k8s-sidecar
      tag: 1.1.0

    datasources:
      enabled: false

    notifiers:
      enabled: false

    dashboards:
      enabled: true
      SCProvider: false

      watchMethod: SLEEP
      label: grafana_dashboard
      folderAnnotation: grafana_folder
      folder: /etc/grafana/dashboards

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'sidecarProvider'
          orgId: 1
          type: file
          disableDeletion: false
          allowUiUpdates: true
          options:
            path: /etc/grafana/dashboards/platform
            foldersFromFilesStructure: true

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://platform-prometheus-proxy:9090
          access: proxy
          isDefault: true
          jsonData:
            keepCookies:
              - dat
              - sat

  persistence:
    enabled: false

  grafana.ini:
    auth.anonymous:
      enabled: true
    analytics:
      reporting_enabled: false
      check_for_updates: false
    users:
      default_theme: light
    snapshots:
      external_enabled: false
    dashboards:
      default_home_dashboard_path: /etc/grafana/dashboards/home.json

zipkin: {}

sentry: {}
