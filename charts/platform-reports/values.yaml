platform:
  accessTokenCookieNames: sat,dat
  token: {}

  nodeLabels:
    job: platform.neuromation.io/job


image:
  repository: "$IMAGE_REPO"
  tag: "$IMAGE_TAG"

imagePullSecrets: []

secrets: []

externalSecrets: []
  # - name: platform-admin-secret
  #   secretStoreName: vault-backend
  #   secretStoreKind: ClusterSecretStore
  #   data:
  #     DATABASE_URL:
  #       key: kv-v2/platform
  #       property: DATABASE_URL
  #     API_KEY:
  #       key: kv-v2/platform
  #       property: API_KEY

metricsApi:
  replicas: 2

  resources:
    requests:
      cpu: 100m
      memory: 256Mi

  ingress:
    enabled: false
    ingressClassName: ""
    hosts: []
    annotations: {}

metricsExporter:
  replicas: 2

  port: 8080

  resources:
    requests:
      cpu: 100m
      memory: 256Mi

  podMetadata:
    annotations: {}

prometheusProxy:
  replicas: 2

  resources:
    requests:
      cpu: 100m
      memory: 256Mi

grafanaProxy:
  replicas: 2

  resources:
    requests:
      cpu: 100m
      memory: 256Mi

  ingress:
    enabled: false
    ingressClassName: ""
    hosts: []
    annotations: {}

prometheus:
  url: http://thanos-query-http:10902

  remoteStorageEnabled: true

kube-prometheus-stack:
  nameOverride: prometheus
  fullnameOverride: prometheus

  defaultRules:
    create: false

  kubeApiServer:
    enabled: true

    serviceMonitor:
      additionalLabels:
        platform.apolo.us/scrape-metrics: "true"

  kubelet:
    enabled: true

    serviceMonitor:
      additionalLabels:
        platform.apolo.us/scrape-metrics: "true"

  kubeControllerManager:
    enabled: false

  coreDns:
    enabled: false

  kubeDns:
    enabled: false

  kubeEtcd:
    enabled: false

  kubeScheduler:
    enabled: false

  kubeProxy:
    enabled: false

  kubeStateMetrics:
    enabled: true

  kube-state-metrics:
    nameOverride: kube-state-metrics
    fullnameOverride: kube-state-metrics

    image:
      registry: registry.k8s.io
      repository: kube-state-metrics/kube-state-metrics
      tag: v2.10.1

    customLabels:
      service: kube-state-metrics

    selectorOverride:
      app.kubernetes.io/name: kube-state-metrics

    resources:
      requests:
        cpu: 100m
        memory: 200Mi

    collectors:
      - nodes
      - pods
      - deployments
      - statefulsets
      - daemonsets
      - horizontalpodautoscalers

    metricLabelsAllowlist:
      - nodes=[platform.neuromation.io/nodepool,platform.neuromation.io/job]
      - pods=[service,platform.neuromation.io/user,platform.neuromation.io/job,platform.apolo.us/org,platform.apolo.us/project,platform.apolo.us/preset,platform.apolo.us/app-instance-name]

    priorityClassName: ""

    prometheus:
      monitor:
        metricRelabelings:
        - sourceLabels:
          - label_beta_kubernetes_io_instance_type
          targetLabel: label_node_kubernetes_io_instance_type
        additionalLabels:
          platform.apolo.us/scrape-metrics: "true"

  nodeExporter:
    enabled: true

  prometheus-node-exporter:
    nameOverride: prometheus-node-exporter
    fullnameOverride: prometheus-node-exporter

    image:
      registry: quay.io
      repository: prometheus/node-exporter
      tag: v1.7.0

    podLabels:
      service: prometheus-node-exporter

    resources:
      requests:
        cpu: 15m
        memory: 50Mi

    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 100%

    prometheus:
      monitor:
        additionalLabels:
          platform.apolo.us/scrape-metrics: "true"

  prometheusOperator:
    image:
      registry: quay.io
      repository: prometheus-operator/prometheus-operator
      tag: v0.69.1

    podLabels:
      service: prometheus-operator

    prometheusConfigReloader:
      image:
        registry: quay.io
        repository: prometheus-operator/prometheus-config-reloader
        tag: v0.69.1

    thanosImage:
      registry: quay.io
      repository: thanos/thanos
      tag: v0.24.0

    admissionWebhooks:
      patch:
        image:
          registry: registry.k8s.io
          repository: ingress-nginx/kube-webhook-certgen
          tag: v20221220-controller-v1.5.1-58-g787ea74b6
        priorityClassName: ""

    priorityClassName: ""

    serviceMonitor:
      additionalLabels:
        platform.apolo.us/scrape-metrics: "true"

  prometheus:
    prometheusSpec:
      image:
        registry: quay.io
        repository: prometheus/prometheus
        tag: v2.48.0

      podMetadata:
        labels:
          service: prometheus

      replicas: 1

      retention: 12h

      scrapeInterval: 15s
      evaluationInterval: 15s

      resources:
        requests:
          cpu: "500m"
          memory: "1Gi"

      storageSpec:
        volumeClaimTemplate:
          metadata:
            name: prometheus
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi

      serviceMonitorSelector:
        matchLabels:
          platform.apolo.us/scrape-metrics: "true"

      scrapeConfigSelector:
        matchLabels:
          platform.apolo.us/scrape-metrics: "true"

      externalLabels:
        cluster: ""

      priorityClassName: ""

    serviceMonitor:
      additionalLabels:
        platform.apolo.us/scrape-metrics: "true"

  alertmanager:
    alertmanagerSpec:
      image:
        registry: quay.io
        repository: prometheus/alertmanager
        tag: v0.26.0

      podMetadata:
        labels:
          service: alert-manager

      priorityClassName: ""

    serviceMonitor:
      additionalLabels:
        platform.apolo.us/scrape-metrics: "true"

  grafana:
    enabled: false

thanos:
  nameOverride: thanos
  fullnameOverride: thanos

  image:
    repository: quay.io/thanos/thanos
    tag: v0.24.0

  store:
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    dataVolume:
      backend:
        persistentVolumeClaim:
          claimName: thanos-store
    persistentVolumeClaim:
      name: thanos-store
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
    labels:
      service: thanos-store

  # Compact service works with data in object storage
  compact:
    retentionResolutionRaw: 0d
    retentionResolution5m: 0d
    retentionResolution1h: 0d
    extraArgs:
      - --wait-interval=24h
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    dataVolume:
      backend:
        persistentVolumeClaim:
          claimName: thanos-compact
    persistentVolumeClaim:
      name: thanos-compact
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
    labels:
      service: thanos-compact

  query:
    labels:
      service: thanos-query

  bucket:
    labels:
      service: thanos-bucket

  rule:
    enabled: false

  sidecar:
    # NOTE: This is only the service references for the sidecar
    enabled: true
    selector:
      app: null
      app.kubernetes.io/name: prometheus

  priorityClassName: ""

grafana:
  nameOverride: grafana
  fullnameOverride: grafana

  image:
    registry: docker.io
    repository: grafana/grafana
    tag: 10.2.2

  podLabels:
    service: grafana

  adminUser: admin

  ingress:
    enabled: false

  initChownData:
    image:
      repository: busybox
      tag: latest

  sidecar:
    image:
      registry: quay.io
      repository: kiwigrid/k8s-sidecar
      tag: 1.25.2

    dashboards:
      enabled: true
      SCProvider: false

      watchMethod: WATCH
      label: grafana_dashboard
      folderAnnotation: grafana_folder
      folder: /etc/grafana/dashboards

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'sidecarProvider'
          orgId: 1
          type: file
          disableDeletion: false
          allowUiUpdates: true
          editable: true
          options:
            path: /etc/grafana/dashboards/platform
            foldersFromFilesStructure: true

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://platform-prometheus-proxy:9090
          access: proxy
          isDefault: true
          jsonData:
            httpMethod: GET
            manageAlerts: false
            keepCookies:
              - dat
              - sat
            prometheusType: Thanos

  persistence:
    enabled: false

  grafana.ini:
    auth.anonymous:
      enabled: true
    analytics:
      reporting_enabled: false
      check_for_updates: false
    users:
      default_theme: light
    snapshots:
      external_enabled: false
    dashboards:
      default_home_dashboard_path: /etc/grafana/dashboards/home.json
    log:
      mode: console
      level: error

  priorityClassName: ""

sentry: {}

priorityClassName: ""

securityContext:
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  allowPrivilegeEscalation: false
