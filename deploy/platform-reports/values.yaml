nodePoolLabels:
  gpu: platform.neuromation.io/accelerator

objectStore:
  supported: true
  configMapName: thanos-object-storage-config

platform:
  accessTokenCookieName: sat

image:
  repository: "$IMAGE_REPO"
  tag: "$IMAGE_TAG"

prometheusProxy:
  prometheus:
    host: thanos-query-http
    port: 10902
  replicas: 2
  resources:
    requests:
      cpu: 100m
      memory: 128Mi

grafanaProxy:
  replicas: 2
  resources:
    requests:
      cpu: 100m
      memory: 128Mi

prometheus-operator:
  nameOverride: prometheus
  fullnameOverride: prometheus

  defaultRules:
    create: false

  alertmanager:
    enabled: false

  kubeApiServer:
    enabled: false

  kubeControllerManager:
    enabled: false

  coreDns:
    enabled: false

  kubeDns:
    enabled: false

  kubeEtcd:
    enabled: false

  kubeScheduler:
    enabled: false

  kubeProxy:
    enabled: false

  kubeStateMetrics:
    enabled: true

    serviceMonitor:
      interval: 15s

  kube-state-metrics:
    nameOverride: kube-state-metrics
    fullnameOverride: kube-state-metrics

    resources:
      requests:
        cpu: 100m
        memory: 200Mi

    collectors:
      # enabled
      nodes: true
      pods: true

      # disabled
      certificatesigningrequests: false
      configmaps: false
      cronjobs: false
      daemonsets: false
      deployments: false
      endpoints: false
      horizontalpodautoscalers: false
      ingresses: false
      jobs: false
      limitranges: false
      mutatingwebhookconfigurations: false
      namespaces: false
      networkpolicies: false
      persistentvolumeclaims: false
      persistentvolumes: false
      poddisruptionbudgets: false
      replicasets: false
      replicationcontrollers: false
      resourcequotas: false
      secrets: false
      services: false
      statefulsets: false
      storageclasses: false
      validatingwebhookconfigurations: false
      verticalpodautoscalers: false
      volumeattachments: false

  kubelet:
    enabled: true

    serviceMonitor:
      interval: 15s
      https: false
      probes: false
      resource: false
      cAdvisor: true

  nodeExporter:
    enabled: true

    resources:
      requests:
        cpu: 15m
        memory: 50Mi

    serviceMonitor:
      interval: 15s

  prometheus-node-exporter:
    nameOverride: prometheus-node-exporter
    fullnameOverride: prometheus-node-exporter

    extraHostVolumeMounts:
      - name: system-dbus-socket
        hostPath: /var/run/dbus/system_bus_socket
        mountPath: /var/run/dbus/system_bus_socket
        readOnly: true

    extraArgs:
      - --collector.systemd
      - --collector.processes
      - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)
      - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$

  prometheusOperator:
    kubeletService:
      enabled: true

    serviceMonitor:
      selfMonitor: false

  prometheus:
    serviceMonitor:
      selfMonitor: false
    prometheusSpec:
      replicas: 1
      retention: 12h
      scrapeInterval: 15s
      resources:
        requests:
          cpu: "500m"
          memory: "1Gi"
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi

  grafana:
    enabled: true

    defaultDashboardsEnabled: false

    image:
      tag: "7.2.0-beta2" # TODO: upgrade to stable version >= 7.2.0

    nameOverride: grafana
    fullnameOverride: grafana

    adminUser: admin

    podAnnotations:
      updatedAt: "$CURRENT_TIME"

    ingress:
      enabled: false

    sidecar:
      datasources:
        enabled: false
      dashboards:
        enabled: false
      notifiers:
        enabled: false

    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            url: http://prometheus-proxy:9090
            access: proxy
            isDefault: true
            jsonData:
              keepCookies:
                - dat
                - sat

    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'admin'
            orgId: 1
            folder: 'Admin'
            type: file
            disableDeletion: false
            editable: true
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/admin
          - name: 'user'
            orgId: 1
            folder: 'User'
            type: file
            disableDeletion: false
            editable: true
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/user

    dashboardsConfigMaps:
      admin: grafana-admin-dashboards
      user: grafana-user-dashboards

    extraConfigmapMounts:
      - name: home-dashboard
        mountPath: /var/lib/grafana/dashboards/home
        configMap: grafana-home-dashboard
        readOnly: true

    persistence:
      enabled: false

    grafana.ini:
      auth.anonymous:
        enabled: true
      analytics:
        reporting_enabled: false
        check_for_updates: false
      users:
        default_theme: light
      snapshots:
        external_enabled: false
      dashboards:
        default_home_dashboard_path: /var/lib/grafana/dashboards/home/home.json

    serviceMonitor:
      selfMonitor: false

thanos:
  nameOverride: thanos
  fullnameOverride: thanos

  image:
    tag: v0.14.0

  store:
    dataVolume:
      backend:
        persistentVolumeClaim:
          claimName: thanos-store
    persistentVolumeClaim:
      name: thanos-store
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

  compact:
    retentionResolutionRaw: 0d
    retentionResolution5m: 0d
    retentionResolution1h: 0d
    dataVolume:
      backend:
        persistentVolumeClaim:
          claimName: thanos-compact
    persistentVolumeClaim:
      name: thanos-compact
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

  rule:
    enabled: false

  sidecar:
    # NOTE: This is only the service references for the sidecar
    enabled: true
    selector:
      app: prometheus
